(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{420:function(e,t,a){"use strict";a.r(t);var s=a(10),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"ivector-plda-scoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ivector-plda-scoring"}},[e._v("#")]),e._v(" ivector-plda-scoring")]),e._v(" "),a("p",[e._v("用PLDA模型计算trials文件的log似然率,trials文件应有如下格式："),a("code",[e._v("<key1> <key2>")]),e._v("，输出文件应有如下格式："),a("code",[e._v("<key1> <key2> [<dot-product>]")]),e._v("，如果key无法被找到，该程序会给出warning警告。对于训练样本，输入的是每个spk的平均Ivector，"),a("code",[e._v("--num-utts")]),e._v("包含了每个人的utt数，该参数影响了PLDA打分（如果未提供，默认1utt/spk）")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Usage: ivector-plda-scoring <plda> <train-ivector-rspecifier> <test-ivector-rspecifier>\n <trials-rxfilename> <scores-wxfilename>\n\ne.g.: ivector-plda-scoring --num-utts=ark:exp/train/num_utts.ark plda ark:exp/train/spk_ivectors.ark ark:exp/test/ivectors.ark trials scores\nSee also: ivector-compute-dot-products, ivector-compute-plda\n\nOptions:\n  --normalize-length: If true, do length normalization as part of PLDA (see code for details).  This does not set the length unit; by default it instead ensures that the inner product with the PLDA model\'s inverse variance (which is a function of how many utterances the iVector was averaged over) has the expected value, equal to the iVector dimension. (bool, default = true)\n  --num-utts: Table to read the number of utterances per speaker, e.g. ark:num_utts.ark (string, default = "")\n  --simple-length-normalization : If true, replace the default length normalization by an alternative that normalizes the length of the iVectors to be equal to the square root of the iVector dimension. (bool, default = false)\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"ivector-copy-plda"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ivector-copy-plda"}},[e._v("#")]),e._v(" ivector-copy-plda")]),e._v(" "),a("p",[e._v("复制一个PLDA对象，可能对类内协方差应用平滑smoothing")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: ivector-copy-plda <plda-in> <plda-out>\ne.g.: ivector-copy-plda --smoothing=0.1 plda plda.smooth0.1\n\nOptions:\n  --binary: Write output in binary mode (bool, default = true)\n  --normalize-length: If true, do length normalization as part of PLDA (see code for details).  This does not set the length unit; by default it instead ensures that the inner product with the PLDA model's inverse variance (which is a function of how many utterances the iVector was averaged over) has the expected value, equal to the iVector dimension. (bool, default = true)\n  --simple-length-normalization : If true, replace the default length normalization by an alternative that normalizes the length of the iVectors to be equal to the square root of the iVector dimension. (bool, default = false)\n  --smoothing                 : Factor used in smoothing within-class covariance (add this factor times between-class covar) (float, default = 0)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h3",{attrs:{id:"ivector-mean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ivector-mean"}},[e._v("#")]),e._v(" ivector-mean")]),e._v(" "),a("p",[e._v("给定3~4个参数，对spk2utt中每个spk的所有utt的Ivector取均值。输入：spk2utt，由utt索引的一组Ivector；输出：由spk索引的Ivector。如果给了4个参数，就是每个spk对应的utt数的表格；如果只给了2个参数，就是求所有输入文件的均值，并写出均值向量。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: ivector-mean <spk2utt-rspecifier> <ivector-rspecifier> <ivector-wspecifier> [<num-utt-wspecifier>]\nor: ivector-mean <ivector-rspecifier> <mean-wxfilename>\ne.g.: ivector-mean data/spk2utt exp/ivectors.ark exp/spk_ivectors.ark exp/spk_num_utts.ark\nor: ivector-mean exp/ivectors.ark exp/mean.vec\nSee also: ivector-subtract-global-mean\n\nOptions:\n  --binary: If true, write output in binary (only applicable when writing files, not archives/tables. (bool, default = false)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h3",{attrs:{id:"ivector-subtract-global-mean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ivector-subtract-global-mean"}},[e._v("#")]),e._v(" ivector-subtract-global-mean")]),e._v(" "),a("p",[e._v("复制去除均值后的Ivector，第一个参数用于指定均值向量，否则使用输入Ivector的总和？")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: ivector-subtract-global-mean <ivector-rspecifier> <ivector-wspecifier>\nor: ivector-subtract-global-mean <mean-rxfliename> <ivector-rspecifier> <ivector-wspecifier>\ne.g.: ivector-subtract-global-mean scp:ivectors.scp ark:-\nor: ivector-subtract-global-mean mean.vec scp:ivectors.scp ark:-\nSee also: ivector-mean\n\nOptions:\n  --subtract-mean: If true, subtract mean; if false, just copy the input. (bool, default = true)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h3",{attrs:{id:"transform-vec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transform-vec"}},[e._v("#")]),e._v(" transform-vec")]),e._v(" "),a("p",[e._v("对独立的向量进行线性/仿射变换，如，Ivector。类似于transform-feats，比起作用于矩阵，该函数作用于向量，并且是单个变换矩阵，而不是变换矩阵表。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: transform-vec [options] <transform-rxfilename> <feats-rspecifier> <feats-wspecifier>\nSee also: transform-feats, est-pca\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:"ivector-normalize-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ivector-normalize-length"}},[e._v("#")]),e._v(" ivector-normalize-length")]),e._v(" "),a("p",[e._v("将Ivector长度归一化为sqrt(特征维数)？")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage:  ivector-normalize-length [options] <ivector-rspecifier> <ivector-wspecifier>\ne.g.:\n ivector-normalize-length ark:ivectors.ark ark:normalized_ivectors.ark\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h2",{attrs:{id:"补充说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[e._v("#")]),e._v(" 补充说明")]),e._v(" "),a("h3",{attrs:{id:"transform-feats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transform-feats"}},[e._v("#")]),e._v(" transform-feats")]),e._v(" "),a("p",[e._v("应用变化（e.g. LDA; HLDA; fMLLR/CMLLR; MLLT/STC）。当transform-num-cols == feature-dim时，为线性变换，当transform-num-cols == feature-dim+1 (->append 1.0 to features)时，为仿射变换。默认作用于每个utt，当utt2spk文件提供时，可作用于每个spk。若提供了transform-rxfilename，则作用于全局。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Usage: transform-feats [options] (<transform-rspecifier>|<transform-rxfilename>) <feats-rspecifier> <feats-wspecifier>\nSee also: transform-vec, copy-feats, compose-transforms\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h2",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])])])}),[],!1,null,null,null);t.default=r.exports}}]);